{"/home/travis/build/npmtest/node-npmtest-google-tools/test.js":"/* istanbul instrument in package npmtest_google_tools */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-google-tools/lib.npmtest_google_tools.js":"/* istanbul instrument in package npmtest_google_tools */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_google_tools = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_google_tools = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-google-tools/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-google-tools && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_google_tools */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_google_tools\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_google_tools.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_google_tools.rollup.js'] =\n            local.assetsDict['/assets.npmtest_google_tools.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_google_tools.__dirname + '/lib.npmtest_google_tools.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-google-tools/node_modules/google-tools/index.js":"var PageRank = require('pagerank'),\n    async = require('async');\n\nvar google = {\n\n    pagerank: function(p, cb) {\n        new PageRank(p.url, cb);\n    },\n\n    search: require('./lib/google-search.js').search,\n\n    suggest: require('./lib/google-suggest.js').suggest,\n\n    deep_suggest: function(q, cb) {\n        var i = 0;\n        var next = function(items, cb) {\n            if(i == 26) cb(null, items);\n            else suggest({q: q.q+\"+\"+String.fromCharCode(97+(i++)) }, function(err, r) {\n                next(items.concat(r), cb);\n            });\n        };\n        next([], cb);\n    },\n\n\n    pagerankAvg: function(p, cb) {\n        google.search(p, function(err, results) {\n            if(err) { return cb(err, null); }\n\n            async.mapSeries(results.results, function(r, cb) {\n                google.pagerank({\n                    url: r.link\n                }, cb);\n            }, function(err, results) {\n                if(err) { return cb(err, null); }\n\n                var sum = results.reduce(function(a,b){return a+b;})\n                cb(null, Math.floor(100*sum/results.length)/100);\n            });\n\n        });\n    },\n\n    position: function(p, cb) {\n        google.search(p, function(err, results) {\n            if(err) { return cb(err, null); }\n\n            for(var i = 0 ; i < results.results.length; i++) {\n                if(results.results[i].link.substr(0, p.url.length) === p.url) {\n                    cb(null, i+1);\n                    return;\n                }\n            }\n\n            cb(null, -1);\n        });\n    }\n};\n\nmodule.exports = google;\n","/home/travis/build/npmtest/node-npmtest-google-tools/node_modules/google-tools/lib/google-search.js":"var htmlparser = require('htmlparser'),\n    request = require('request'),\n    querystring = require('querystring');\n\n// Generate a string from a structure as output by htmlparser\nvar domNodeToString = function(node) {\n   \n   if (node.type == \"text\") {\n      return node.data;\n   }\n   else if(node.type == \"tag\") {\n      \n      var pre = \"<\"+node.name,\n          post = \"</\"+node.name+\">\";\n      \n      for(var attribName in node.attribs) {\n         if(attribName != \"style\") { // Hack to remove style=\"...\"\n            pre += \" \"+attribName+\"=\\\"\"+node.attribs[attribName]+\"\\\"\";\n         }\n      }\n      pre += \">\";\n      \n      if(node.children) {\n         node.children.forEach(function(c) {\n            pre += domNodeToString(c);\n         });\n      }\n      return pre+post;\n   } \n};\n\n// Generate the result set from the dom returned by htmlparser\nformatGoogleResponse = function(dom) {\n   \n    var results = [], nResults;\n    \n    var walk = function(node_list, indent) {\n       \n       for(var i = 0 ; i < node_list.length ; i++) {\n          var node = node_list[i];\n             \n          if(!!node.attribs && !!node.attribs.id) {\n                  if(node.attribs.id == \"resultStats\") {\n                       try {\n                          nResults =  node.children[0].data.replace(/&#160;/g, '').replace(/&nbsp;/g, '');\n                       } catch(ex) {}\n                  }\n                  \n                  if(node.attribs.id == \"ires\") {\n                       try {\n                          results = node.children[0].children;\n                       } catch(ex) {}\n                  }\n          }\n          \n          // Recurse :\n          if(node.children) {\n             walk(node.children, indent+\"  \");\n          } \n       }\n    };\n    walk(dom, \"\");\n    \n    \n    \n    var formatted = [];\n    \n    results.forEach(function(r) {\n       \n       // Title\n       var htmlTitle = domNodeToString({\n          type: 'tag',\n          name: 'h3',\n          children: r.children[0].children[0].children\n       });\n       \n       // Content & description\n       var htmlSnippet, links;\n       if(r.children.length > 1) {\n          \n          var node = r.children[1];\n          \n          // Parse the \"classic\" case\n          if(node.type == \"tag\" && node.name == \"div\" && !!node.attribs && node.attribs[\"class\"] == \"s\") {\n             \n             htmlSnippet = domNodeToString({\n                type: 'tag',\n                name: 'div',\n                children: r.children[1].children.slice(0,-1)\n             });\n             \n             links = domNodeToString({\n                type: 'tag',\n                name: 'div',\n                children: [r.children[1].children[r.children[1].children.length - 1] ]\n             });\n             \n          }\n          else {\n             htmlSnippet = domNodeToString(r.children[1]);\n          }\n          \n       }\n       \n       // URL\n      var trTitle = r.children[0].children[0];\n      var titleLink;\n      if(trTitle.attribs) {\n        titleLink = trTitle.attribs.href; // /url?\n      }\n      else {\n        titleLink = trTitle.children[0].children[0].children[0].attribs.href;\n      }\n       var par = {};\n       if(titleLink) {\n          if(titleLink.substr(0,5) === \"/url?\") {\n            par = querystring.parse(titleLink.substr(5));\n          }\n          else if (titleLink.substr(0,7) === \"/images\") {\n            par.q = 'http://www.google.com'+titleLink;\n          }\n       }\n       \n       // Push result\n       formatted.push({\n          link: par.q,\n          htmlTitle: htmlTitle,\n          title: htmlTitle.replace(/<(?:.|\\n)*?>/gm, ''),\n          htmlSnippet: htmlSnippet,\n          snippet: htmlSnippet ? htmlSnippet.replace(/<(?:.|\\n)*?>/gm, '') : '',\n          links: links\n       });\n       \n    });\n    \n    if(nResults) {\n        nResults = parseInt(nResults.match(/ *([\\d, ]+)/)[1].replace(/[ ,]/g,''),10);\n   }\n    \n    return {\n        nResults: nResults,\n        results: formatted\n     };\n};\n\n\nexports.search = function (opts, cb) {\n   \n   var p = {\n      q: opts.q\n   };\n\n   for(var k in opts) {\n      p[k] = opts[k];\n   }\n\n   if(!p.hl) {\n      p.hl = 'en';\n   }\n\n   var url = 'http://www.google.com/search?'+querystring.stringify(p);\n\n   request(url, function (error, response, body) {\n      if (error) {\n          cb(error, null);\n          return;\n      }\n      else if (response.statusCode == 200) {\n\n         var handler = new htmlparser.DefaultHandler(function (error, dom) {\n             if (error) {\n                cb(error, null);\n                return;\n             }\n             else {\n                var results = formatGoogleResponse(dom);\n                \n                cb(null, results);\n                \n             }\n         }, { \n            verbose: false, \n            ignoreWhitespace: true \n         });\n         var parser = new htmlparser.Parser(handler);\n         parser.parseComplete(body);\n     }\n\n   });\n   \n};\n","/home/travis/build/npmtest/node-npmtest-google-tools/node_modules/google-tools/lib/google-suggest.js":"var http = require('http'),\n    querystring = require('querystring');\n\nsuggest = exports.suggest = function(q, cb) {\n   \n   var req = http.request({\n      host: 'www.google.com',\n      port: 80,\n      path: '/s?'+querystring.stringify({ q: q.q }), \n      method: 'GET'\n    }, function(res) {\n     res.setEncoding('utf8');\n     var body = \"\";\n     res.on('data', function (chunk) { body += chunk; });\n     res.on('end', function() {\n        var items;\n        body = body.substr(19, body.length-19-1); // remove the jsonp callback\n        try {\n           items = JSON.parse(body)[1].map(function(k) { return k[0]; });\n        }\n        catch(ex) {\n           cb(ex, null);\n        }\n        \n        cb(null, items);\n     });\n   });\n   req.on('error', function(e) { cb(null, e); });\n   req.end();\n};\n\n\n"}